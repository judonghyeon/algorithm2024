import queue
def dfs(graph, start, visited):
    visited.add(start)
    print(start, end=' ')
    for neighbor in sorted(graph[start]):  # 이웃 노드들을 정렬하여 순회
        if neighbor not in visited:
            dfs(graph, neighbor, visited)



def bfs(graph, start):
    visited = { start }
    que = queue.Queue()
    que.put(start)
    while not que.empty():
        v = que.get()
        print(v, end=' ')
        nbr = sorted(graph[v] - visited)
        for u in nbr:
            visited.add(u)
            que.put(u)

mygraph = {
    "A": {"B", "C"},
    "B": {"A", "D"},
    "C": {"A", "D", "E"},
    "D": {"B", "C", "F"},
    "E": {"C", "G", "H"},
    "F": {"D"},
    "G": {"E", "H"},
    "H": {"E", "G"}
}

print('DFS: ', end='')
dfs(mygraph, "A", set())
print()

print('BFS: ', end='')
bfs(mygraph, "A")
print()