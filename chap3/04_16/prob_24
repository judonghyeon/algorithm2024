from collections import deque
vertex =   {"A" : {"B", "C"},
            "B" : {"A", "D"},
            "C" : {"A", "D", "E"},
            "D" : {"B", "C", "F"},
            "E" : {"C", "G", "H"},
            "F" : {"D"},
            "G" : {"E", "H"},
            "H" : {"E", "G"}
            }

adjMat = [[0, 1, 1, 0, 0, 0, 0, 0],
          [1, 0, 0, 1, 0, 0, 0, 0],
          [1, 0, 0, 1, 1, 0, 0, 0],
          [0, 1, 1, 0, 0, 1, 0, 0],
          [0, 0, 1, 0, 0, 0, 1, 1],
          [0, 0, 0, 1, 0, 0, 0, 0],
          [0, 0, 0, 0, 1, 0, 0, 1],
          [0, 0, 0, 0, 1, 0, 1, 0]
          ]

def dfs_matrix(adjMat, start, visited=None):
    if visited is None:
        visited = [False] * len(adjMat)
    
    visited[start] = True
    print(chr(start + 65), end='')  # A부터 시작하는 노드 이름 출력
    
    for i, isConnected in enumerate(adjMat[start]):
        if isConnected and not visited[i]:
            dfs_matrix(adjMat, i, visited)

# 사용 예시
visited = [False] * len(adjMat)  # 방문한 노드를 체크할 리스트
dfs_matrix(adjMat, 0)  # A부터 시작
print()



def bfs_matrix(adjMat, start):
    visited = [False] * len(adjMat)
    queue = deque([start])
    
    visited[start] = True
    
    while queue:
        vertex = queue.popleft()
        print(chr(vertex + 65), end='')  # A부터 시작하는 노드 이름 출력
        
        for i, isConnected in enumerate(adjMat[vertex]):
            if isConnected and not visited[i]:
                visited[i] = True
                queue.append(i)

# 사용 예시
bfs_matrix(adjMat, 0)  # A부터 시작
