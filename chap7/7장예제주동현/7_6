def KnapSack_dp(W, wt, val, n):
    A = [[0 for x in range(W+1)] for x in range(n+1)]

    for i in range(1, n+1):
        for w in range(1, W+1):
            if wt[i-1] > w:
                A[i][w] = A[i-1][w]
            else:
                valWith = val[i-1] + A[i-1][w-wt[i-1]]
                valWithout = A[i-1][w]
                A[i][w] = max(valWith, valWithout)

    return A[n][W]

# 테스트 함수
def test_KnapSack_dp():
    # 테스트 케이스 1
    W1 = 50
    wt1 = [10, 20, 30]
    val1 = [60, 100, 120]
    n1 = len(wt1)
    result1 = KnapSack_dp(W1, wt1, val1, n1)
    print(f"Test Case 1: Expected output: 220, Actual output: {result1}")

    # 테스트 케이스 2
    W2 = 7
    wt2 = [1, 3, 4, 5]
    val2 = [1, 4, 5, 7]
    n2 = len(wt2)
    result2 = KnapSack_dp(W2, wt2, val2, n2)
    print(f"Test Case 2: Expected output: 9, Actual output: {result2}")

    # 테스트 케이스 3
    W3 = 5
    wt3 = [1, 2, 3]
    val3 = [10, 20, 30]
    n3 = len(wt3)
    result3 = KnapSack_dp(W3, wt3, val3, n3)
    print(f"Test Case 3: Expected output: 50, Actual output: {result3}")

    # 테스트 케이스 4
    W4 = 0
    wt4 = [1, 2, 3]
    val4 = [10, 20, 30]
    n4 = len(wt4)
    result4 = KnapSack_dp(W4, wt4, val4, n4)
    print(f"Test Case 4: Expected output: 0, Actual output: {result4}")

    # 테스트 케이스 5
    W5 = 10
    wt5 = [5, 4, 6, 3]
    val5 = [10, 40, 30, 50]
    n5 = len(wt5)
    result5 = KnapSack_dp(W5, wt5, val5, n5)
    print(f"Test Case 5: Expected output: 90, Actual output: {result5}")

# 테스트 함수 호출
test_KnapSack_dp()
